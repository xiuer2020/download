程序员的自我修养 ――编码习惯篇
烟雨 烟雨 2016-03-10 17:20:01
　　程序员的自我修养
　　――如何成为一个好程序员
　　本篇是我个人经历和经验的部分总结，如果有异议可以在留言中提出。
　　首先这里说一下，如果你是误入计算机行业，不知道如何找到兴趣或者如何继续下去，本文不适合你，并且我会劝你早日离开该行业。如果你想要提升，那么请看此文。
　　一、编写可维护的代码
　　网上曾流传一个段子：一个写代码一团糟的程序员和一个写代码整洁的程序员在同一家公司里，老板需要裁员时，把写代码整洁的裁掉了，为啥呢，因为写代码整洁的人看不懂一团糟的代码，而一团糟的人能懂整洁的代码。
　　不知道是否受到这个段子的影响，好多程序员的代码都是一团糟，并且是无文档说明，无注释，无环境配置说明的三无产品。每次调试或测试这些代码时，往往令其他人很头疼。
　　这样真的好吗？我个人认为，一个人的竞争力不是体现在这种糟糕的不可替代性上，而是应该体现在因技术领域领先而拥有的不可替代性上。
　　如果一家公司因为代码糟糕而留住那位糟糕的程序员，我相信那家公司离倒闭也不远了。而一位保持良好编码习惯的程序员，必定会在各个公司都大受欢迎，毕竟不会有团队成员欢迎一位猪队友把糟糕代码加入他们本来已梳理清楚的代码里。
　　二、编写环境配置
　　很多程序员认为文档说明并不重要，因为很多知识网上一搜就有。对于绝大部分知识而言，这种想法并没有错，然而环境一旦变复杂，今日好不容易配置完成的环境，没准第二日再次配置就失败了。
　　比如架设一台服务器，你用的centOS6.5 or 7？用的mysql 5.1 or 5.5？Apache版本是多少？Tomcat呢？有配置什么mod吗？是编译安装还是yum的？如果编译安装的话，当时有加链接库吗？有设置安装地址吗？
　　哪怕安装应用软件，还有个版本的区别，所以不要轻视文档。
　　三、编写代码文档说明
　　很多程序猿认为，既然有注释了，为何还要写文档？那么我问你，如果代码有几十页，让你迅速找到一个功能对应的模块，你知道在哪儿吗？难道你几个月以后还能记得当时写的注释叫啥名？
　　文档可以标注接口，当时一些需求的注意点，必要时还可以写一下架构的原理和设计方式。
　　四、编写统一风格的代码
　　代码的编写方式有很多种，但是统一的风格有助于不同程序员间增加互相理解。所以代码编写的方式很有必要进行统一。在此我推荐《编写可维护的javascript》，里面写到很多排版与注释在编码格式方面的问题，以及详细讲解了一些编码方式在格式检查器中可能引起的问题。虽然这本是js版，但是编写java代码的开发以及其他了解过js的开发都可以阅读，里面写的非常详细，如今我很期待出python版，毕竟pep8之类的文档看起来实在太痛苦了。
　　当然，我也很期待能有牛人写一本编写可维护的python，如果这几年没人动笔，我过几年闲下来了就开始写，O(∩_∩)O~。
　　五、多进行项目实践
　　作为一个程序员，没有写多少项目是可悲的，不管你是前端还是后端，甚至UI，跳槽时人家就爱看项目，甚至还看你项目是否对口。哪怕你写过无数项目，但只要项目不对口就不能被当做项目，没错，IT行业就是这么残酷。之前我公司有位研究生来应聘，要求工资只有5000一个月，然而是做硬件开发的，大学和研究生阶段全耗在硬件开发上，没有一个软件项目。
　　就连我公司这样的小公司都果断拒绝了这人，可想而知其他互联网的大公司。不过有的大公司更严格，哪怕同样需要招收硬件开发，用C++和VHDL的待遇天差地别。
　　所以多进行项目实践，尤其你想今后深入发展的方面，一定是有益处的。
　　六、合理的准备
　　正所谓磨刀不误砍柴工，写代码前做充分准备是很有必要的。产品的这个需求是否合理，
　　会否引发一些问题，程序实现时要用到哪些技术，是否有更合理的技术可以替代，如何设计类和方法才能最高效的完成，是否需要考虑到后续的兼容和更新，等等。这些问题都是有必要在写代码前梳理一下的。如果梳理的好可以事半功倍，梳理不好的人可能写到中途才发现原本可以有更好的方法。
　　今日就写到这里，后期再慢慢写吧，希望每一位程序员都能找到更好的工作，拥有更好的人生